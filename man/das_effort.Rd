% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/das_effort.R
\name{das_effort}
\alias{das_effort}
\alias{das_effort.data.frame}
\alias{das_effort.das_df}
\title{Summarize DAS effort}
\usage{
das_effort(x, ...)

\method{das_effort}{data.frame}(x, ...)

\method{das_effort}{das_df}(
  x,
  method,
  sp.codes,
  conditions = NULL,
  dist.method = "greatcircle",
  num.cores = NULL,
  ...
)
}
\arguments{
\item{x}{\code{das_df} object; output from \code{\link{das_process}},
or a data frame that can be coerced to a \code{das_df} object}

\item{...}{arguments passed to the chopping function specified using \code{method},
such as \code{seg.km} or \code{seg.min.km}}

\item{method}{character; method to use to chop DAS data into effort segments
Can be \code{"equallength"} or \code{"condition"} (case-sensitive) to use
\code{\link{das_chop_equal}} or \code{\link{das_chop_condition}}, respectively}

\item{sp.codes}{character; species code(s) to include in segdata output}

\item{conditions}{character vector of names of conditions to include in segdata output.
These values must be column names from the output of \code{\link{das_process}},
e.g. 'Bft', 'SwellHght', etc.
If \code{method == "condition"}, then these also are the conditions which
trigger segment chopping when they change.}

\item{dist.method}{character;
method to use to calculate distance between lat/lon coordinates.
Can be "greatcircle" to use the great circle distance method (TODO - add ref),
or one of "lawofcosines", "haversine", or "vincenty" to use
\code{\link[swfscMisc]{distance}}. Default is "greatcircle"}

\item{num.cores}{Number of CPUs to over which to distribute computations.
Defaults to \code{NULL}, which uses one fewer than the number of cores
reported by \code{\link[parallel]{detectCores}}.
Using 1 core likely will be faster for smaller datasets}
}
\value{
List of three data frames:
  \itemize{
    \item segdata: one row for every segment, and columns for information including
      unique segment number, start/end/midpoint coordinates, conditions (e.g. Beaufort),
      and number of sightings and number of animals on that segment for every species
      indicated in \code{sp.codes}.
    \item siteinfo: details for all sightings in \code{x}, including:
      the unique segment number it is associated with, segment mid points (lat/lon),
      whether the sighting was included in the segdata counts (column name 'included'),
      and the output information described in \code{\link{das_sight}}.
    \item randpicks: see \code{\link{das_chop_equal}};
      \code{NULL} if using "condition" method.
  }
}
\description{
Chop DAS data into effort segments
}
\details{
This is the top-level function for chopping processed DAS data
  into modeling segments (henceforth 'segments'), and assigning sightings
  and related information (e.g., weather conditions) to each segment.
  This function returns data frames with all relevant information for the
  effort segments and associated sightings ('segdata' and 'siteinfo', respectively).
  Before chopping, the DAS data is filtered for events (rows) where either
  the 'OnEffort' column is \code{TRUE} or the 'Event' column "E".
  In other words, the data is filtered for continuous effort sections (henceforth 'effort sections'),
  where effort sections run from "B"/"R" to "E" events (inclusive),
  and then passed to the chopping function specified using \code{method}.
  All on effort events that are not one of ?, 1, 2, 3, 4, 5, 6, 7, or 8
  must have non-\code{NA} Lat and Lon values

  The distance between the lat/lon points of subsequent events
  is calculated using the method specified in \code{dist.method}.
  See \code{\link{das_sight}} for how the sightings are processed.

  Sightings are only included in the segdata counts/summaries if they were made
  while on effort and in a Beafort sea state less than or equal to five.
  Included sightings are those with a \code{TRUE} value in the 'included'
  column in siteinfo.
  TODO: Allow user to specify this.
}
\examples{
y <- system.file("das_sample.das", package = "swfscDAS")
y.proc <- das_process(y)

das_effort(
  y.proc, method = "equallength", sp.codes = c("016", "018"),
  seg.km = 10, num.cores = 1
)

das_effort(
  y.proc, method = "condition", sp.codes = c("016", "018"),
  seg.min.km = 0.05, num.cores = 1
)

}
